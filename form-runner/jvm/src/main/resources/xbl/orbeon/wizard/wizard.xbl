<!--
  Copyright (C) 2012 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:xbl="http://www.w3.org/ns/xbl"
    xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:oxf="http://www.orbeon.com/oxf/processors"
    xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"
    xmlns:array="http://www.w3.org/2005/xpath-functions/array"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:ErrorSummary="java:org.orbeon.xbl.ErrorSummary"
    xmlns:Wizard="java:org.orbeon.xbl.Wizard">

    <xbl:binding
        id="fr-wizard"
        element="fr|wizard"
        xxf:external-events="fr-wizard-focus">

        <xbl:resources>
            <xbl:style src="/xbl/orbeon/wizard/wizard.css"/>
        </xbl:resources>
        <xbl:handlers>

            <xbl:handler event="xxforms-refresh-done" observer="#document" xxbl:scope="outer">
                <!--
                    - `fr:error-summary` listens to events during the capture phase so that it is up to
                       date once the wizard processes them.
                -->
                <xf:dispatch name="fr-update-section-status" targetid="fr-wizard-outer-group"/>
            </xbl:handler>

            <xbl:handler event="fr-prev" phase="target">
                <!-- NOTE: The target shouldn't be in the outer scope ideally. -->
                <xf:dispatch
                    name="DOMActivate"
                    targetid="fr-wizard-prev"
                    xxbl:scope="outer"/>
            </xbl:handler>
            <xbl:handler event="fr-next" phase="target">
                <!-- NOTE: The target shouldn't be in the outer scope ideally. -->
                <xf:dispatch
                    name="DOMActivate"
                    targetid="fr-wizard-next"
                    xxbl:scope="outer"/>
            </xbl:handler>
            <xbl:handler event="fr-show-toc" phase="target">
                <xf:action if="$local/separate-toc/data(.)">
                    <xf:setvalue
                        ref="$local/show-toc"
                        value="true()"/>
                    <xf:setvalue
                        ref="$local/show-body"
                        value="false()"/>
                </xf:action>
            </xbl:handler>
            <xbl:handler event="fr-update-validity" phase="target">
                <!-- NOTE: The target shouldn't be in the outer scope ideally. -->
                <xf:dispatch
                    name="DOMActivate"
                    targetid="fr-wizard-update-validity"
                    xxbl:scope="outer"/>
            </xbl:handler>
            <xbl:handler event="fr-visit-all fr-show-relevant-errors" phase="target">
                <!-- See https://github.com/orbeon/orbeon-forms/issues/3178 -->
                <xf:var
                    xxbl:scope="outer"
                    name="target-name"
                    value="
                        if (xxf:instance('local')/validate/data(.) = 'free') then
                            'fr-wizard-visit-all'
                        else
                            'fr-wizard-visit-all-available'
                "/>

                <!-- NOTE: The target shouldn't be in the outer scope ideally. -->
                <xf:dispatch
                    name="{$target-name}"
                    targetid="{$target-name}"
                    xxbl:scope="outer"/>

            </xbl:handler>
            <!-- For client-side API -->
            <xbl:handler event="fr-wizard-focus" phase="target">

                <!-- TODO: Support `lax` and `strict` modes. -->
                <xf:action if="xxf:instance('local')/validate/data(.) = 'free'">

                    <xf:setfocus
                        control="{event('fr-control-name')}-control"
                        xxf:repeat-indexes="{event('fr-repeat-indexes')}"
                        xxbl:scope="outer"/>

                </xf:action>

            </xbl:handler>
            <!-- When a page/section is shown, create the associated `fr:section-status` attribute if needed -->
            <!-- NOTE: 2018-08-07: This is done only for *top-level* pages. -->
            <xbl:handler event="fr-section-shown" phase="target">

                <xf:var
                    name="section-binding"
                    value="event('section-binding')"/>

                <xf:insert
                    if="not(exists($section-binding/@fr:section-status))"
                    context="$section-binding"
                    origin="xf:attribute('fr:section-status', '')"/>

                <!-- NOTE: No need to update the section status here, as the `xf:insert` will cause a subsequent refresh. -->

            </xbl:handler>
        </xbl:handlers>
        <xbl:implementation>
            <xf:model>
                <xf:instance id="local" xxf:expose-xpath-types="true">
                    <local>
                        <current-case-id/>
                        <show-toc/>
                        <show-body/>
                        <readwrite/>
                        <validate/>
                        <separate-toc/>
                    </local>
                </xf:instance>

                <xf:var name="local" value="instance('local')"/>

                <xf:bind ref="validate"                       xxf:default="Wizard:normalizeWizardMode(xxf:component-param-value('validate'))"/>
                <xf:bind ref="separate-toc" type="xs:boolean" xxf:default="Wizard:isWizardSeparateToc()"/>
                <xf:bind ref="show-toc"     type="xs:boolean" xxf:default="true()"/>
                <xf:bind ref="show-body"    type="xs:boolean" xxf:default="not(Wizard:isWizardSeparateToc())"/>

                <xf:instance id="available-top-level-sections" xxf:expose-xpath-types="true">
                    <available-top-level-sections/>
                </xf:instance>

            </xf:model>
        </xbl:implementation>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy-modes.xsl"/>

                <!-- `app` and `form` must be passed as attributes (see view.xsl) -->
                <xsl:variable name="static-app"             select="/*/@app/string()"/>
                <xsl:variable name="static-form"            select="/*/@form/string()"/>
                <xsl:variable name="static-validation-mode" select="/*/@validation-mode/string()"/>

                <xsl:variable name="do-next-handler" as="element()">
                    <xf:action event="DOMActivate">
                        <xsl:choose>
                            <xsl:when test="$static-validation-mode = 'explicit'">
                                <!-- Update validity, refresh, then try again -->
                                <xxf:update-validity
                                    control="{{string-join(($prev-nav-case-ids, $current-nav-case-id), ' ')}}"
                                    recurse="true"/>
                                <!-- This ensures that when `fr-do-next` runs, UI variables have been updated -->
                                <xf:refresh/>
                            </xsl:when>
                            <xsl:otherwise>
                                <!-- Do action immediately -->
                            </xsl:otherwise>
                        </xsl:choose>
                        <xf:dispatch
                            name="fr-do-next"
                            targetid="{{event('xxf:targetid')}}"/>
                    </xf:action>
                </xsl:variable>

                <xsl:variable
                    xmlns:p="http://www.orbeon.com/oxf/pipeline"
                    name="static-subsections-nav"
                    select="
                        (
                            for $a in /*/@subsections-nav return $a = 'true', (: takes precedence if present :)
                            p:property(string-join(('oxf.xforms.xbl.fr.wizard.subsections-nav', $static-app, $static-form), '.')) = true(),
                            false()
                        )[1]
                    "
                    as="xs:boolean"/>

                <!-- `all | active | none` -->
                <xsl:variable
                    xmlns:p="http://www.orbeon.com/oxf/pipeline"
                    name="static-subsections-toc"
                    select="
                        (
                            /*/@subsections-toc, (: takes precedence if present :)
                            p:property(string-join(('oxf.xforms.xbl.fr.wizard.subsections-toc', $static-app, $static-form), '.'))[. = ('all', 'none')],
                            'active'
                        )[1]"
                    as="xs:string"/>

                <xsl:variable
                    name="static-nav-sections-or-grids"
                    select="
                        if ($static-subsections-nav) then
                            /*//(
                                fr:section[
                                    (
                                        (: Top-level section :)
                                        count(ancestor::fr:section) = 0 and (
                                            empty(fr:section)          or
                                            @subsections-nav = 'false' or
                                            frf:isRepeat(.)
                                        )
                                    ) or (
                                        (: First-level subsection :)
                                        count(ancestor::fr:section) = 1    and
                                        not(../@subsections-nav = 'false') and
                                        not(frf:isRepeat(..))
                                    )
                                ],
                                (: Grid within a top-level section which also contains subsections
                                   and top-level section doesn't have Subsection navigation explicitly
                                   disabled and is not repeated :)
                                fr:grid[
                                    count(ancestor::fr:section) = 1    and
                                    not(../@subsections-nav = 'false') and
                                    not(frf:isRepeat(..))              and
                                    exists((preceding-sibling::fr:section | following-sibling::fr:section))
                                ]
                            )
                        else
                            (: Top-level sections :)
                            /*/fr:section
                "/>

                <!-- Make sure that duplicates are kept, see https://github.com/orbeon/orbeon-forms/issues/3516 -->
                <xsl:variable
                    name="static-matching-top-level-section-ids"
                    select="
                        for $s in $static-nav-sections-or-grids
                        return $s/ancestor-or-self::fr:section[last()]/@id/string()
                "/>

                <xsl:variable
                    name="static-nav-section-or-grid-ids"
                    select="$static-nav-sections-or-grids/((@id/string(), concat(generate-id(), '-wizard-grid'))[1])"/>

                <xsl:variable
                    name="static-top-level-section-ids"
                    select="/*/fr:section/@id/string()"/>

                <xsl:template match="/*">
                    <xf:group appearance="xxf:internal">
                        <xh:div class="fr-wizard-body{{if (xxf:instance('local')/show-body/data(.)) then '' else ' xforms-hidden'}}">

                            <!-- FIXME: Don't like that this is a top-level `switch` id! -->
                            <xf:switch id="switch" xbl:attr="caseref=sectionref" xxf:element="div" xxbl:scope="outer" xxf:update="full">
                                <!-- We need a way to listen to each case, but we don't want to duplicate the script and
                                     anyway event.target doesn't work within case (which would be a bug) -->
                                <xf:action type="javascript" event="fr-section-scroll" target="#observer">
                                    <![CDATA[
                                    var $ = ORBEON.jQuery;
                                    var target = event.target;
                                    var sectionTitle = $(target).closest('.xbl-fr-wizard').find('.fr-wizard-body .xforms-case-selected .fr-section-title')[0];

                                    if (sectionTitle) {
                                        var r = sectionTitle.getBoundingClientRect();
                                        if (r.top < 0 || r.bottom > $(window).height()) {
                                            window.scrollTo($(window).scrollLeft(), $(sectionTitle).offset().top);
                                        }
                                    }
                                    ]]>
                                </xf:action>
                                <!-- Wrap each top-level fr:section within each own case -->
                                <xsl:for-each select="fr:section">
                                    <xsl:variable name="static-section-id" select="@id"/>
                                    <xf:case id="{$static-section-id}-case">
                                        <xsl:if test="/*/@sectionref">
                                            <xsl:attribute
                                                name="value"
                                                select="concat('''', frf:controlNameFromId($static-section-id), '''')"
                                                xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"/>
                                        </xsl:if>

                                        <!-- Visit current section when leaving it -->
                                        <xxf:setvisited
                                            event="xforms-deselect"
                                            target="#observer"
                                            control="{{event('xxf:targetid')}}"
                                            visited="true"
                                            recurse="true"/>

                                        <!-- Check that incoming `xforms-focus` is allowed -->
                                        <!-- TODO: See https://github.com/orbeon/orbeon-forms/issues/3323. -->

                                        <!-- Un-visit all subsequent sections upon error in current section in `strict` mode -->
                                        <!-- Use `delay="0"`, so we dispatch all the `fr-wizard-unvisit-following` after all the
                                             `xforms-invalid`, avoiding a `StackOverflowError` on large forms -->
                                        <xf:dispatch
                                            event="xforms-invalid"
                                            if="xxf:instance('local')/validate/data(.) = 'strict'"

                                            name="fr-wizard-unvisit-following"
                                            targetid="fr-wizard-unvisit-following"
                                            delay="0"/>

                                        <!-- Subsection nav enabled AND the top-level section is not part of the nav, which
                                             means we navigate it's subsections/grids. -->
                                        <xsl:variable
                                            name="has-subsections-nav"
                                            select="$static-subsections-nav and not($static-nav-section-or-grid-ids = @id)"/>

                                        <xf:action event="xforms-select" target="#observer">

                                            <xsl:if test="not($has-subsections-nav)">
                                                <!-- Keep `current-case-id` up to date in case switch happened via toggling. -->
                                                <!-- Q: Could we use `caseref`? -->
                                                <xf:setvalue
                                                    ref="xxf:instance('local')/current-case-id"
                                                    value="event('xxf:targetid')"/>
                                            </xsl:if>

                                            <xf:dispatch name="fr-section-scroll" targetid="switch"/>

                                            <xf:var
                                                name="section-id"
                                                value="replace(event('xxf:targetid'), '-case$', '')"
                                                xxbl:scope="inner"/>

                                            <xf:dispatch name="fr-section-shown" targetid="fr-wizard" xxbl:scope="inner">
                                                <xf:property name="section-binding" value="xxf:binding(replace(event('xxf:targetid'), '-case$', ''))" xxbl:scope="outer"/>
                                                <xf:property name="section-name"    value="frf:controlNameFromIdOpt($section-id)"/>
                                                <xf:property name="validate"        value="$local/validate/data(.)"/>
                                                <xf:property name="separate-toc"    value="$local/separate-toc/data(.)"/>
                                            </xf:dispatch>

                                        </xf:action>

                                        <xf:group appearance="xxf:internal">
                                            <xsl:copy>
                                                <xsl:attribute name="collapse">false</xsl:attribute>
                                                <xsl:apply-templates select="@* except (@collapse | @open)"/>

                                                <!-- Update the `changed` token -->
                                                <xf:action event="xforms-value-changed">
                                                    <xf:setvalue
                                                        ref="@fr:section-status"
                                                        value="
                                                            let $tokens := distinct-values(xxf:split(.))
                                                            return
                                                                if (empty(index-of($tokens, 'changed'))) then
                                                                    string-join(($tokens, 'changed'), ' ')
                                                                else
                                                                    ."/>
                                                </xf:action>

                                                <xsl:choose>
                                                    <xsl:when test="$has-subsections-nav">

                                                        <!-- Don't forget the enclosing section lHHA -->
                                                        <xsl:apply-templates select="xf:label | xf:help | xf:hint | xf:alert"/>

                                                        <!-- Subsections -->
                                                        <xf:switch id="{$static-section-id}-switch" xxf:element="div" xxf:update="full">
                                                            <xsl:for-each select="fr:section | fr:grid">
                                                                <!-- fr:grid might not have an id, and we need one to toggle -->
                                                                <xsl:variable name="section-or-grid-id" select="(@id, concat(generate-id(), '-wizard-grid'))[1]"/>
                                                                <xf:case id="{$section-or-grid-id}-case">
                                                                    <xxf:setvisited
                                                                        event="xforms-deselect"
                                                                        target="#observer"
                                                                        control="{{event('xxf:targetid')}}"
                                                                        visited="true"
                                                                        recurse="true"/>
                                                                    <xf:action event="xforms-select" target="#observer">
                                                                        <!-- Keep `current-case-id` up to date in case switch happened via toggling. -->
                                                                        <!-- Q: Could we use `caseref`? -->
                                                                        <xf:setvalue
                                                                            ref="xxf:instance('local')/current-case-id"
                                                                            value="event('xxf:targetid')"/>
                                                                        <xf:dispatch name="fr-section-scroll" targetid="switch"/>
                                                                    </xf:action>
                                                                    <xf:group appearance="xxf:internal">
                                                                        <xsl:copy>
                                                                            <xsl:if test="self::fr:section">
                                                                                <xsl:attribute name="collapse">false</xsl:attribute>
                                                                            </xsl:if>
                                                                            <xsl:if test="not(@id)">
                                                                                <xsl:attribute name="id" select="$section-or-grid-id"/>
                                                                            </xsl:if>
                                                                            <xsl:apply-templates select="@* except (@collapse | @open) | node()"/>
                                                                        </xsl:copy>
                                                                    </xf:group>
                                                                </xf:case>
                                                            </xsl:for-each>
                                                        </xf:switch>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <!-- No subsection nav -->
                                                        <xsl:apply-templates select="node()"/>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </xsl:copy>
                                        </xf:group>
                                    </xf:case>
                                </xsl:for-each>
                            </xf:switch>
                        </xh:div>
                        <xf:group
                            class="fr-wizard-toc{{
                                ' xforms-hidden'         [not($local/show-toc/data(.))],
                                ' fr-wizard-separate-toc'[$local/separate-toc/data(.)]
                            }}">

                            <!-- Dispatch fr-toc-shown event as needed -->
                            <xf:group appearance="xxf:internal" ref=".[$local/show-toc/data(.)]">
                                <xf:action
                                    event="xforms-enabled"
                                    target="#observer">

                                    <xf:dispatch
                                        name="fr-toc-shown"
                                        targetid="fr-wizard">
                                        <xf:property name="validate"     value="$local/validate/data(.)"/>
                                        <xf:property name="separate-toc" value="$local/separate-toc/data(.)"/>
                                    </xf:dispatch>
                                </xf:action>
                            </xf:group>

                            <xf:group
                                xxbl:scope="outer"
                                id="fr-wizard-outer-group"
                                class="fr-wizard-toc-inner"
                                xxf:element="div">

                                <!-- Statically-known section and grid ids -->
                                <xf:var
                                    name="nav-section-or-grid-ids"
                                    value="{string-join(for $id in $static-nav-section-or-grid-ids return concat('''', $id, ''''), ',')}"/>

                                <xf:var
                                    name="nav-matching-top-level-section-ids"
                                    value="{string-join(for $id in $static-matching-top-level-section-ids return concat('''', $id, ''''), ',')}"/>

                                <xf:var
                                    name="top-level-section-ids"
                                    value="{string-join(for $id in $static-top-level-section-ids return concat('''', $id, ''''), ',')}"/>

                                <xf:var
                                    name="validated-mode"
                                    value="xxf:instance('local')/validate/data(.) != 'free'"/>

                                <xf:var
                                    name="separate-toc-mode"
                                    value="xxf:instance('local')/separate-toc/data(.)"/>

                                <xf:var
                                    name="relevant-nav-section-or-grid-ids"
                                    value="
                                        $nav-section-or-grid-ids[xxf:is-control-relevant(.)]"/>

                                <!-- TODO: maybe use xxf:is-control-relevant(.) too -->
                                <xf:var
                                    name="relevant-top-level-section-ids"
                                    value="
                                        $top-level-section-ids[
                                            exists(xxf:binding(.)) and xxf:relevant(xxf:binding(.))
                                        ]"/>

                                <xf:var
                                    name="relevant-nav-case-ids"
                                    value="
                                        for $section-id in $relevant-nav-section-or-grid-ids
                                        return concat($section-id, '-case')"/>

                                <xf:var
                                    name="relevant-top-level-case-ids"
                                    value="
                                        for $section-id in $relevant-top-level-section-ids
                                        return concat($section-id, '-case')"/>

                                <xf:var
                                    name="current-top-level-case-id"
                                    value="case('switch')"/>

                                <!-- NOTE: Initially, current-case-id might be empty, so default to the first relevant case id. -->
                                <xf:var
                                    name="current-nav-case-id"
                                    value="
                                        (
                                            xxf:instance('local')/current-case-id[xxf:non-blank()]/string(),
                                            $relevant-nav-case-ids
                                        )[1]"/>

                                <xf:var
                                    name="nav-case-index"
                                    value="index-of($relevant-nav-case-ids, $current-nav-case-id)"/>

                                <xf:var
                                    name="top-level-case-index"
                                    value="index-of($relevant-top-level-case-ids, $current-top-level-case-id)"/>

                                <xf:var
                                    name="prev-nav-case-ids"
                                    value="$relevant-nav-case-ids[position() lt $nav-case-index]"/>

                                <xf:var
                                    name="next-nav-case-ids"
                                    value="$relevant-nav-case-ids[position() gt $nav-case-index]"/>

                                <xf:var
                                    name="next-top-level-case-ids"
                                    value="$relevant-top-level-case-ids[position() gt $top-level-case-index]"/>

                                <xf:var
                                    name="allow-next-top-level"
                                    value="
                                        let $next-top-level-case-id := $next-top-level-case-ids[1]
                                        return
                                            exists($next-top-level-case-id) and
                                            exists(
                                                index-of(
                                                    xxf:split(xxf:instance('available-top-level-sections')),
                                                    frf:controlNameFromIdOpt(replace($next-top-level-case-id, '-case$', ''))
                                                )
                                            )"/>

                                <xf:var
                                    name="allow-next"
                                    value="
                                        (: We can go to the next top-level section :)
                                        $allow-next-top-level or
                                        (: Next is not in a different top-level section :)
                                        replace($current-top-level-case-id, '-case$', '') =
                                            $nav-matching-top-level-section-ids[
                                                index-of(
                                                    $nav-section-or-grid-ids,
                                                    replace($next-nav-case-ids[1], '-case$', '')
                                                )
                                            ]"/>

                                <xf:var
                                    id="fr-wizard-is-first-nav"
                                    name="is-first-nav"
                                    value="empty($prev-nav-case-ids)"/>

                                <xf:var
                                    id="fr-wizard-is-last-nav"
                                    name="is-last-nav"
                                    value="empty($next-nav-case-ids)"/>

                                <xf:var name="prev-button-ref" value="if (not($is-first-nav)) then xxf:instance('local')/readwrite else ''"/>
                                <xf:var name="next-button-ref" value="if (not($is-last-nav))  then xxf:instance('local')/readwrite else ''"/>

                                <!-- We put this here because we need `$relevant-top-level-section-ids` -->
                                <xf:action event="fr-update-section-status">

                                    <xf:var
                                        name="maps"
                                        value="Wizard:gatherTopLevelSectionStatusJava($relevant-top-level-section-ids)"/>

                                    <!-- Update available sections instance -->
                                    <!-- We do this because we don't want to run `Wizard:gatherSectionStatusJava` at each refresh, and we want to
                                         depend on instance values, although in practice it might not make much of a difference. -->
                                    <xf:setvalue
                                        ref="xxf:instance('available-top-level-sections')"
                                        value="
                                            string-join(
                                                for $m in $maps
                                                return
                                                    if (map:get($m, 'is-available')) then map:get($m, 'name') else (),
                                                ' '
                                            )"/>

                                    <!-- Update section statuses for all relevant sections -->
                                    <xf:action iterate="$relevant-top-level-section-ids">

                                        <xf:var
                                            name="section-binding"
                                            value="xxf:binding(.)"/>

                                        <xf:action if="exists($section-binding/@fr:section-status)">

                                            <xf:var
                                                name="map"
                                                value="
                                                    for $m in $maps
                                                    return
                                                        if (map:get($m, 'name') = name($section-binding)) then $m else ()"/>

                                            <xf:var
                                                name="existing-tokens"
                                                value="
                                                    distinct-values(
                                                        xxf:split($section-binding/@fr:section-status)
                                                    )"/>

                                            <xf:var
                                                name="new-tokens"
                                                value="
                                                    distinct-values(
                                                        (
                                                            $existing-tokens[
                                                                not(. = (
                                                                    'incomplete',
                                                                    'invalid',
                                                                    'visible-incomplete',
                                                                    'visible-invalid'
                                                                    )
                                                                )
                                                            ], (: these toggle so remove them first :)
                                                            'incomplete'        [map:get($map, 'has-incomplete-fields')],
                                                            'invalid'           [map:get($map, 'has-error-fields')],
                                                            'visible-incomplete'[map:get($map, 'has-visible-incomplete-fields')],
                                                            'visible-invalid'   [map:get($map, 'has-visible-error-fields')]
                                                        )
                                                    )"/>

                                            <xf:setvalue
                                                if="not(count($existing-tokens) = count($new-tokens) and empty($existing-tokens[not(. = $new-tokens)]))"
                                                ref="$section-binding/@fr:section-status"
                                                value="string-join($new-tokens, ' ')"/>

                                        </xf:action>
                                    </xf:action>
                                </xf:action>

                                <!-- This id is used to expose visibility to buttons outside the wizard -->
                                <xf:group
                                    id="fr-wizard-submit-hide"
                                    ref="xxf:instance('local')/readwrite[not($validated-mode) or empty($next-top-level-case-ids)]"/>

                                <xh:ul class="nav nav-list">
                                    <xsl:apply-templates mode="toc-sections"/>
                                </xh:ul>
                                <xh:div class="fr-wizard-navigation{{if (xxf:instance('local')/separate-toc/data(.)) then ' xforms-hidden' else ''}}">

                                    <xf:action event="xforms-enabled" target="#observer">

                                        <!-- Make sure the first relevant case is shown initially -->
                                        <!-- NOTE: Ideally, we should also handle the case where the fr:section in the
                                             currently-selected case becomes non-relevant. However, this should not happen
                                             in a well-designed form (that would be very user unfriendly). If xf:case supported
                                             relevance, we might be able to let this behavior be handled by the XForms engine.
                                         -->
                                        <!-- Find the last available AND visited section -->
                                        <xf:var
                                            name="last-available-and-visited-top-level-section-id"
                                            value="
                                                (
                                                    (: First relevant section by default :)
                                                    $relevant-top-level-section-ids[1],
                                                    (: But also check subsequent sections for availability and visited :)
                                                    (
                                                        for $id in $relevant-top-level-section-ids[position() gt 1]
                                                        return
                                                            if (
                                                                exists(
                                                                    index-of(
                                                                        xxf:split(xxf:instance('available-top-level-sections')),
                                                                        frf:controlNameFromIdOpt($id)
                                                                    )
                                                                ) and
                                                                    exists(xxf:binding($id)/@fr:section-status)
                                                            ) then
                                                                $id
                                                            else
                                                                ()
                                                    )
                                                )[last()]"/>

                                        <!-- Set initial current section -->
                                        <xf:action if="exists($last-available-and-visited-top-level-section-id)">

                                            <xf:var
                                                name="last-available-and-visited-top-level-case-id"
                                                value="concat($last-available-and-visited-top-level-section-id, '-case')"/>

                                            <!-- See https://github.com/orbeon/orbeon-forms/issues/3433 -->
                                            <xf:setvalue
                                                ref="xxf:instance('local')/current-case-id"
                                                value="Wizard:caseIdsForTopLevelSection($last-available-and-visited-top-level-section-id)[1]"/>

                                            <xf:toggle
                                                case="{{$last-available-and-visited-top-level-case-id}}"/>

                                            <!-- Dispatch `fr-section-shown` the first time the body is shown if needed -->
                                            <xf:action if="xxf:instance('local')/show-body/data(.)">
                                                <xf:dispatch name="fr-section-shown" targetid="fr-wizard" xxbl:scope="inner">
                                                    <xf:property name="section-binding" value="xxf:binding($last-available-and-visited-top-level-section-id)"              xxbl:scope="outer"/>
                                                    <xf:property name="section-name"    value="frf:controlNameFromIdOpt($last-available-and-visited-top-level-section-id)" xxbl:scope="outer"/>
                                                    <xf:property name="validate"        value="xxf:instance('local')/validate/data(.)"/>
                                                    <xf:property name="separate-toc"    value="xxf:instance('local')/separate-toc/data(.)"/>
                                                </xf:dispatch>
                                            </xf:action>

                                        </xf:action>

                                    </xf:action>

                                    <xh:div class="pagination pagination-centered">
                                        <xh:ul>
                                            <xh:li class="{{if ($prev-button-ref instance of xs:string) then 'disabled' else ''}}">
                                                <xf:trigger id="fr-wizard-prev"  ref="$prev-button-ref" appearance="minimal" class="fr-wizard-prev">
                                                    <!-- https://github.com/orbeon/orbeon-forms/issues/723
                                                         https://github.com/orbeon/orbeon-forms/issues/1042 -->
                                                    <xf:label>
                                                        <xh:i class="icon-chevron-left"/>&#x200b;
                                                    </xf:label>
                                                    <xf:action event="DOMActivate">
                                                        <xf:setvalue
                                                            ref="xxf:instance('local')/current-case-id"
                                                            value="$prev-nav-case-ids[last()]"/>
                                                        <xf:toggle
                                                            case="{{$prev-nav-case-ids[last()]}}"/>
                                                        <xf:setfocus
                                                            control="{{$prev-nav-case-ids[last()]}}"
                                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>
                                                    </xf:action>
                                                </xf:trigger>
                                            </xh:li>
                                            <xh:li>
                                                <xh:span class="fr-page-number">
                                                    <xf:output value="$nav-case-index"/>
                                                    <xf:output value="concat(' ', $fr-resources/summary/paging/of, ' ')"/>
                                                    <xf:output value="count($relevant-nav-case-ids)"/>
                                                </xh:span>
                                            </xh:li>
                                            <xh:li class="{{if ($next-button-ref instance of xs:string) then 'disabled' else ''}}">
                                                <xf:trigger id="fr-wizard-next" ref="$next-button-ref" appearance="minimal" class="fr-wizard-next">
                                                    <xf:label>
                                                        <xh:i class="icon-chevron-right"/>&#x200b;
                                                    </xf:label>
                                                    <!-- DOMActivate handler which depends on `$static-validation-mode` -->
                                                    <xsl:copy-of select="$do-next-handler"/>
                                                    <xf:action event="fr-do-next">
                                                        <xf:dispatch
                                                            name="fr-wizard-visit-all-to-current"
                                                            targetid="fr-wizard-visit-all-to-current"/>
                                                        <xf:action if="$allow-next">
                                                            <xf:setvalue
                                                                ref="xxf:instance('local')/current-case-id"
                                                                value="$next-nav-case-ids[1]"/>
                                                            <xf:toggle
                                                                case="{{$next-nav-case-ids[1]}}"/>
                                                            <xf:setfocus
                                                                control="{{$next-nav-case-ids[1]}}"
                                                                includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                                                excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>
                                                        </xf:action>
                                                        <xf:action if="not($allow-next)">
                                                            <xf:setfocus
                                                                control="{{$current-nav-case-id}}"
                                                                includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                                                excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>
                                                        </xf:action>
                                                    </xf:action>
                                                </xf:trigger>
                                            </xh:li>
                                        </xh:ul>
                                        <!-- We put these here so that `$do-next-handler` has the right variables in scope -->
                                        <!-- NOTE: This shouldn't be in the outer scope ideally. -->
                                        <xf:group id="fr-wizard-update-validity" appearance="xxf:internal">
                                            <xsl:copy-of select="$do-next-handler"/>
                                        </xf:group>
                                        <xf:group id="fr-wizard-visit-all" appearance="xxf:internal">
                                            <xxf:setvisited
                                                event="fr-wizard-visit-all"

                                                control="switch"
                                                visited="true"
                                                recurse="true"/>
                                        </xf:group>
                                        <xf:group id="fr-wizard-visit-all-to-current" appearance="xxf:internal">
                                            <!-- NOTE: We visit the current page upon xforms-deselect too. -->
                                            <xxf:setvisited
                                                event="fr-wizard-visit-all-to-current"

                                                iterate="$prev-nav-case-ids, $current-nav-case-id"
                                                control="{{.}}"
                                                visited="true"
                                                recurse="true"/>
                                        </xf:group>
                                        <xf:group id="fr-wizard-visit-all-available" appearance="xxf:internal">
                                            <xxf:setvisited
                                                event="fr-wizard-visit-all-to-last-available"

                                                iterate="
                                                    for $s in xxf:split(xxf:instance('available-top-level-sections'))
                                                    return concat($s, '-section-case')"
                                                control="{{.}}"
                                                visited="true"
                                                recurse="true"/>
                                        </xf:group>
                                        <xf:group id="fr-wizard-unvisit-following" appearance="xxf:internal">
                                            <xxf:setvisited
                                                event="fr-wizard-unvisit-following"

                                                iterate="$next-nav-case-ids"
                                                control="{{.}}"
                                                visited="false"
                                                recurse="true"/>
                                        </xf:group>
                                    </xh:div>
                                </xh:div>
                            </xf:group>
                        </xf:group>
                        <!-- In case the view contains elements other than sections (like dialogs) -->
                        <xh:div class="fr-wizard-other">
                            <xf:group appearance="xxf:internal" xxbl:scope="outer">
                                <xsl:apply-templates select="* except fr:section"/>
                            </xf:group>
                        </xh:div>
                    </xf:group>
                </xsl:template>

                <!-- TOC: Swallow non-relevant nodes -->
                <xsl:template match="text()" mode="toc-sections"/>
                <xsl:template match="*" mode="toc-sections">
                    <xsl:apply-templates mode="toc-sections"/>
                </xsl:template>

                <!-- TOC: handle section -->
                <xsl:template match="fr:section" mode="toc-sections">

                    <xsl:variable
                        name="static-current-section"
                        select="."/>
                    <xsl:variable
                        name="static-section-id"
                        select="$static-current-section/@id"/>
                    <xsl:variable
                        name="static-is-top-level-section"
                        select="empty($static-current-section/ancestor::fr:section)"/>
                    <xsl:variable
                        name="static-top-level-section-id"
                        select="($static-current-section/ancestor-or-self::fr:section/@id)[1]"/>
                    <xsl:variable
                        name="static-top-level-section-case-id"
                        select="concat($static-top-level-section-id, '-case')"/>

                    <!-- Propagate binding so that entry for section disappears if the section is non-relevant -->
                    <xf:group>
                        <xsl:copy-of select="@model | @context | @bind | @ref"/>

                        <xf:var name="top-level-section-available">
                            <xxf:value
                                value="
                                    exists(
                                        index-of(
                                            xxf:split(xxf:instance('available-top-level-sections')),
                                            '{frf:controlNameFromIdOpt($static-top-level-section-id)}'
                                        )
                                    )"
                                xxbl:scope="inner"/>
                        </xf:var>

                        <xf:var
                            name="top-level-section-visited"
                            value="exists(@fr:section-status)"/>

                        <xf:var
                            name="top-level-section-tokens"
                            value="xxf:split(@fr:section-status)"/>

                        <xf:var
                            name="top-level-section-active"
                            value="not($separate-toc-mode) and $current-top-level-case-id = '{concat($static-section-id, '-case')}'"/>

                        <xf:var
                            name="section-active"
                            value="not($separate-toc-mode) and $current-nav-case-id = '{concat($static-section-id, '-case')}'"/>

                        <xh:li class="{{
                            'disabled'   [not($top-level-section-available)],
                            'active'     [$section-active or $top-level-section-active],
                            'started'    [$top-level-section-visited],
                            $top-level-section-tokens,

                            'first-page'         [$relevant-top-level-case-ids[1]      = '{concat($static-section-id, '-case')}'],
                            'last-top-level-page'[$relevant-top-level-case-ids[last()] = '{concat($static-section-id, '-case')}'],
                            'last-page'          [$relevant-nav-case-ids[last()]       = '{concat($static-section-id, '-case')}']
                        }}">

                            <!-- For debugging -->
                            <!--<xf:output value="string-join($top-level-section-tokens, '/')"/>-->

                            <xf:var
                                name="section-label"
                                value="xxf:label('{$static-section-id}')"/>

                            <xf:trigger appearance="minimal">
                                <xf:label>
                                    <xf:output value="$section-label"/>
                                    <xh:span class="fr-toc-edit"><xf:output value="xxf:r('components.wizard.edit', '|fr-fr-resources|')"/></xh:span>
                                    <xsl:if test="$static-is-top-level-section">
                                        <!-- NOTE: Hide labels when not in `separate-toc` mode as they take a lot of space -->
                                        <xh:span class="{{'xforms-hidden'[not(xxf:instance('local')/separate-toc/data(.))]}} label{{
                                            if ($top-level-section-tokens = 'invalid') then
                                                ' label-important'
                                            else if ($top-level-section-tokens = 'incomplete') then
                                                ' label-warning'
                                            else if ($top-level-section-visited) then
                                                ' label-success'
                                            else
                                                ''
                                        }}"><xf:output value="
                                                xxf:r(
                                                    if ($top-level-section-tokens = 'invalid') then
                                                        'components.wizard.errors'
                                                    else if ($top-level-section-tokens = 'incomplete') then
                                                        'components.wizard.incomplete'
                                                    else if ($top-level-section-visited) then
                                                        'components.wizard.complete'
                                                    else
                                                        'components.wizard.not-started',
                                                    '|fr-fr-resources|'
                                                )"/></xh:span>
                                    </xsl:if>
                                </xf:label>
                                <xf:hint value="$section-label"/>
                                <!-- DOMActivate handler which depends on `$static-validation-mode` -->
                                <xsl:copy-of select="$do-next-handler"/>
                                <xf:action event="fr-do-next" if="$top-level-section-available">

                                    <!-- Figure out the nav section id based on whether we support subsection navigation AND where in the hierarchy
                                         the clicked TOC section is. -->
                                    <xsl:variable
                                        name="static-nav-section-id"
                                        select="
                                            if ($static-subsections-nav) then
                                                (
                                                    if ($static-is-top-level-section) then
                                                        (: Current section is a top-level section. Try first subsection or grid if any,
                                                           otherwise the top-level section itself, which means that there are no subsections
                                                           or grids. Unfortunately, there is some logic duplication between here and the
                                                           computation of `$static-nav-sections-or-grids` above. :)
                                                        (
                                                            $static-current-section[
                                                                not(@subsections-nav = 'false') and
                                                                not(frf:isRepeat(.))            and
                                                                exists(fr:section)
                                                            ]/(fr:section | fr:grid)[1],
                                                            $static-current-section
                                                        )[1]
                                                    else
                                                        (: Current section is a subsection. Take first subsection from the top, as only two levels of
                                                           section navigation are supported. :)
                                                        ($static-current-section/ancestor-or-self::fr:section)[2]
                                                )/(
                                                    @id,
                                                    concat(generate-id(), '-wizard-grid')
                                                )[1]
                                            else
                                                $static-top-level-section-id
                                    "/>

                                    <!-- Remember where we are toggling to, toggle... -->
                                    <xf:setvalue
                                        ref="xxf:instance('local')/current-case-id"
                                        value="'{$static-nav-section-id}-case'"/>
                                    <xf:toggle
                                        case="{$static-nav-section-id}-case"/>

                                    <!-- ...and always focus on specific sub-section -->
                                    <xf:setfocus
                                        control="{$static-section-id}"
                                        includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                        excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                    <!-- Show body if needed -->
                                    <xf:var name="local" value="xxf:instance('local')"/>
                                    <xf:action if="$local/separate-toc/data(.)">
                                        <xf:setvalue
                                            ref="$local/show-toc"
                                            value="false()"/>

                                        <!-- See https://github.com/orbeon/orbeon-forms/issues/3668 -->
                                        <xf:action if="not($local/show-body/data(.))">

                                            <xf:var
                                                name="current-top-level-section-id"
                                                value="replace($current-top-level-case-id, '-case$', '')"/>

                                            <xf:dispatch name="fr-section-shown" targetid="fr-wizard" xxbl:scope="inner">
                                                <xf:property name="section-binding" value="xxf:binding($current-top-level-section-id)"              xxbl:scope="outer"/>
                                                <xf:property name="section-name"    value="frf:controlNameFromIdOpt($current-top-level-section-id)" xxbl:scope="outer"/>
                                                <xf:property name="validate"        value="xxf:instance('local')/validate/data(.)"/>
                                                <xf:property name="separate-toc"    value="xxf:instance('local')/separate-toc/data(.)"/>
                                            </xf:dispatch>

                                            <xf:setvalue
                                                ref="$local/show-body"
                                                value="true()"/>
                                        </xf:action>

                                    </xf:action>
                                </xf:action>
                            </xf:trigger>

                            <xsl:choose>
                                <xsl:when test="$static-subsections-toc = 'all' and exists(.//fr:section)">
                                    <xh:ul class="nav nav-list">
                                        <xsl:apply-templates mode="toc-sections"/>
                                    </xh:ul>
                                </xsl:when>
                                <xsl:when test="$static-subsections-toc = 'active' and exists(.//fr:section)">
                                    <xh:ul class="nav nav-list{{' xforms-hidden'[not($top-level-section-active)]}}">
                                        <xsl:apply-templates mode="toc-sections"/>
                                    </xh:ul>
                                </xsl:when>
                                <xsl:otherwise>
                                    <!-- No content -->
                                </xsl:otherwise>
                            </xsl:choose>
                        </xh:li>
                    </xf:group>
                </xsl:template>

            </xsl:transform>
        </xbl:template>
    </xbl:binding>

</xbl:xbl>