<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors"
         xmlns:frf="java:org.orbeon.oxf.fr.FormRunner">

    <xbl:binding
        id="fr-repeater-binding"
        element="fr|repeater"
        xxf:external-events="fr-move-up fr-move-down fr-insert-above fr-insert-below fr-remove">

        <xbl:resources>
            <xbl:style src="/xbl/orbeon/repeater/repeater.css"/>
        </xbl:resources>

        <xbl:handlers>
            <xbl:handler event="fr-remove fr-move-up fr-move-down fr-insert-above fr-insert-below" phase="target">
                <xf:dispatch name="{event('xxf:type')}" targetid="repeat-group" xxf:repeat-indexes="{event('row')}"/>
            </xbl:handler>
        </xbl:handlers>

        <!-- Keep a single global copy of the repeat menu. It is moved around as needed. -->
        <xxbl:global>
            <div class="dropdown fr-repeater-dropdown-menu" xmlns="http://www.w3.org/1999/xhtml">
                <button class="btn btn-mini dropdown-toggle xforms-hidden" data-toggle="dropdown" tabindex="-1" aria-expanded="false">
                    <span class="caret"/>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li role="presentation"  class="fr-insert-above">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-chevron-up"/><xf:output value="xxf:r('components.grid.insert-above', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="fr-insert-below">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-chevron-down"/><xf:output value="xxf:r('components.grid.insert-below', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="divider"/>
                    <li role="presentation" class="fr-move-up">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-arrow-up"/><xf:output value="xxf:r('components.grid.move-up', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="fr-move-down">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-arrow-down"/><xf:output value="xxf:r('components.grid.move-down', 'fr-fr-resources')"/></a>
                    </li>
                    <li role="presentation" class="divider"/>
                    <li role="presentation" class="fr-remove">
                        <a role="menuitem" tabindex="-1" href="#"><i class="fa fa-fw fa-minus-circle"/><xf:output value="xxf:r('components.grid.remove.label', 'fr-fr-resources')"/></a>
                    </li>
                </ul>
            </div>
        </xxbl:global>

        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/copy.xsl"/>
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>

                <xsl:variable name="root" select="/*[1]"/>

                <xsl:variable name="apply-defaults"     select="$root/@apply-defaults = 'true'"/>
                <xsl:variable name="readonly"           select="$root/@readonly = 'true'"/>
                <xsl:variable name="remove-constraint"  select="($root/@remove-constraint[normalize-space()], 'true()')[1]"/>
                <xsl:variable name="repeat-id"          select="concat($root/@id, '-repeat')"/>

                <xsl:variable name="repeat-expression"  select="($root/@ref, $root/@nodeset, concat('bind(''', $root/@bind, ''')'))[1]" as="xs:string"/>

                <xsl:variable name="appearance"         select="($root/@appearance, 'full')[1]"/>
                <xsl:variable name="insert"             select="($root/@insert, if ($appearance = 'full') then 'index' else 'bottom')[1]"/>
                <xsl:variable name="remove-at-bottom"   select="false()"/>

                <xsl:template match="/*">

                    <!-- Root element -->
                    <xh:div xxf:control="true" class="{'fr-repeat-container', @class}">

                        <xf:var name="repeat-context">
                            <xxf:value value="." xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var name="repeat-sequence">
                            <xxf:value value="{$repeat-expression}" xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var name="repeat-template">
                            <xxf:value value="{(@template, @origin)[1]}" xxbl:scope="outer"/>
                        </xf:var>
                        <xf:var name="repeat-index">
                            <!-- Replace quote by two quotes in the repeat id to avoid possible XPath injection -->
                            <xxf:value value="index('{replace($repeat-id, '''', '''''')}')" xxbl:scope="outer"/>
                        </xf:var>
                        <!-- NOTE: We need a better way to get the Form Runner mode. See also #673 and #629. -->
                        <xf:var
                            name="view-mode"
                            value="xxf:readonly($repeat-context) or fr:is-readonly-mode()"/>

                        <!-- NOTE: `min="foo"` is taken as no minimum. Dubious but has been like this for a long time. -->
                        <xf:var name="min"    as="xs:integer"  value="(xs:integer(fr:component-param-value('min')   [. castable as xs:integer])[. ge 0], 0)[1]"/>
                        <xf:var name="freeze" as="xs:integer"  value="(xs:integer(fr:component-param-value('freeze')[. castable as xs:integer])[. ge 0], 0)[1]"/>

                        <xf:var
                            name="max"
                            as="xs:integer?"
                            value="
                                let $s := fr:component-param-value('max'),
                                    $i := xs:integer($s[. castable as xs:integer])
                                return
                                    if ($s = 'none') then
                                        ()
                                    else if (exists($s) and empty($i)) then
                                        0
                                    else
                                        $i
                        "/>

                        <xf:var name="can-add" value="empty($max) or count($repeat-sequence) lt $max"/>

                        <xf:action event="DOMActivate" observer="fr-repeater-add fr-repeater-add-bottom">
                            <xsl:choose>
                                <xsl:when test="$insert = 'index'">
                                    <xf:var
                                        name="p"
                                        value="max(($repeat-index, $freeze))"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xf:var
                                        name="p"
                                        value="count($repeat-sequence)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xf:dispatch name="fr-insert-below" targetid="fr-repeater-binding">
                                <xf:property name="row" value="$p"/>
                            </xf:dispatch>
                        </xf:action>

                        <xf:action event="DOMActivate" observer="fr-repeater-remove-bottom">
                            <xf:var name="p" value="count($repeat-sequence)"/>
                            <xf:dispatch name="fr-remove" targetid="fr-repeater-binding">
                                <xf:property name="row" value="$p"/>
                            </xf:dispatch>
                        </xf:action>

                        <!-- Placeholder to add first iteration when empty (could have `and count($repeat-sequence) = 0`,
                             but seems fine to keep this permanently). See #1509. -->
                        <xsl:if test="$appearance = 'full' and not($readonly)">
                            <xf:group ref=".[not($view-mode)]" class="fr-repeater-top-buttons">
                                <xf:trigger
                                    appearance="xxf:small"
                                    ref="if ($can-add) then $repeat-context else ''"
                                    id="fr-repeater-add"
                                    xxf:title="{{xxf:r('components.section.add-another.hint',  '|fr-fr-resources|')}}">
                                    <xf:label><xh:i class="fa fa-fw fa-plus-circle"/><xf:output value="xxf:r('components.section.add-another.label', '|fr-fr-resources|')"/></xf:label>
                                </xf:trigger>
                            </xf:group>
                        </xsl:if>

                        <xf:repeat ref="{$repeat-expression}" id="{$repeat-id}" xxbl:scope="outer">
                            <xf:group appearance="xxf:internal" xxbl:scope="inner" id="repeat-group">

                                <!-- Run row operations, checking that they are allowed first -->
                                <xf:action
                                    event="fr-remove fr-move-up fr-move-down fr-insert-above fr-insert-below"
                                    target="#observer"
                                    if="concat('can-', substring-after(event('xxf:type'), 'fr-')) = xxf:split(xxf:avt-value('fr-repeater-repeat-iteration', 'class'))">

                                    <!-- Make sure we have stable references -->
                                    <xf:var name="context"  value="$repeat-context"/>
                                    <xf:var name="items"    value="xxf:repeat-items()"/>
                                    <xf:var name="p"        value="xxf:repeat-position()"/>
                                    <xf:var name="source"   value="$items[$p]"/>
                                    <xf:var name="instance" value="$source/root()"/>

                                    <!-- Delete source node in any case. It's ok because we have a
                                         reference to it for operations that still require it. -->
                                    <xf:delete ref="$source"/>

                                    <xf:action if="event('xxf:type') = 'fr-remove'">
                                        <!-- Handle itemset metadata -->
                                        <xf:action type="xpath">
                                            frf:garbageCollectMetadataItemsets($instance)
                                        </xf:action>

                                        <!-- Let the outside world know -->
                                        <xf:dispatch
                                            targetid="fr-repeater-binding"
                                            name="fr-iteration-removed"/>
                                    </xf:action>

                                    <!-- NOTES:

                                         1. In actions below, we try to restore focus explicitly
                                            as we don't have an xf:move action. See:

                                            https://github.com/orbeon/orbeon-forms/issues/1426

                                         2. When the repeat sequence updates immediately, focus
                                            handling tends to work, but when the repeat sequence
                                            updates upon refresh, information about the order of
                                            operations is lost and the focus is not set to the last
                                            inserted row.

                                         3. The client dispatches xxforms-repeat-activate after the
                                            operation has run. That event happens to be ignored as
                                            we delete the current iteration first.
                                     -->

                                    <xf:action if="event('xxf:type') = 'fr-move-up'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p - 1]"
                                            origin="$source"
                                            position="before"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p - 1}}"
                                            id="sf1"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-move-down'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p + 1]"
                                            origin="$source"
                                            position="after"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p + 1}}"
                                            id="sf2"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-insert-above'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p - 1]"
                                            origin="frf:updateTemplateFromInScopeItemsetMaps($context, $repeat-template), $source"
                                            position="after"
                                            xxf:defaults="{$apply-defaults}"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p}}"
                                            id="sf3"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                        <!-- Let the outside world know -->
                                        <xf:dispatch targetid="fr-repeater-binding" name="fr-iteration-added">
                                            <xf:property name="index" value="$p"/>
                                        </xf:dispatch>

                                    </xf:action>

                                    <xf:action if="event('xxf:type') = 'fr-insert-below'">

                                        <xf:insert
                                            context="$context"
                                            ref="$items[$p - 1]"
                                            origin="$source, frf:updateTemplateFromInScopeItemsetMaps($context, $repeat-template)"
                                            position="after"
                                            xxf:defaults="{$apply-defaults}"/>

                                        <!-- HACK: Specify id so that action id remains stable in Form Builder -->
                                        <xf:setfocus
                                            control="repeat-group"
                                            xxf:repeat-indexes="{{$p + 1}}"
                                            id="sf4"
                                            includes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.includes')}}"
                                            excludes="{{frf:xpathFormRunnerStringProperty('oxf.fr.detail.focus.excludes')}}"/>

                                        <!-- Let the outside world know -->
                                        <xf:dispatch targetid="fr-repeater-binding" name="fr-iteration-added">
                                            <xf:property name="index" value="$p + 1"/>
                                        </xf:dispatch>

                                    </xf:action>
                                </xf:action>

                                <xsl:choose>
                                    <xsl:when test="not($readonly)">

                                        <xf:var name="repeat-position" value="xxf:repeat-position()"/>
                                        <xf:var name="frozen"          value="$repeat-position le $freeze"/>

                                        <xf:var name="remove-constraint">
                                            <!-- Evaluate the constraint in the context of the iteration -->
                                            <xxf:value value="{$remove-constraint}" xxbl:scope="outer"/>
                                        </xf:var>

                                        <xf:var
                                            name="can-classes"
                                            value="
                                                'can-remove'      [$remove-constraint and not($frozen) and count($repeat-sequence) gt $min],
                                                'can-move-up'     [$repeat-position gt $freeze + 1],
                                                'can-move-down'   [not($frozen) and $repeat-position lt count($repeat-sequence)],
                                                'can-insert-above'[$can-add and not($frozen)],
                                                'can-insert-below'[$can-add and $repeat-position ge $freeze]"
                                        />
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xf:var name="can-classes"/>
                                    </xsl:otherwise>
                                </xsl:choose>

                                <xh:div id="fr-repeater-repeat-iteration">
                                    <xsl:attribute name="class" select="@class, 'fr-repeater-repeat-iteration', '{$can-classes}'"/>
                                    <xf:group xxbl:scope="outer" appearance="xxf:internal">
                                        <!-- Scope var in outer scope so content can handle remove availability -->
                                        <xf:var name="fr-repeater-can-remove">
                                            <xxf:value
                                                xxbl:scope="inner"
                                                value="'can-remove' = xxf:split(xxf:avt-value('fr-repeater-repeat-iteration', 'class'))"/>
                                        </xf:var>
                                        <!-- Content of the repeat iteration -->
                                        <xsl:apply-templates select="*"/>
                                    </xf:group>
                                </xh:div>
                            </xf:group>
                        </xf:repeat>

                        <xsl:if test="$appearance = 'minimal' and not($readonly)">
                            <xf:group ref=".[not($view-mode)]" class="fr-repeater-bottom-buttons">
                                <xf:trigger
                                    appearance="minimal"
                                    id="fr-repeater-add-bottom"
                                    ref="$repeat-context[$can-add]"
                                    xxf:title="{{xxf:r('components.section.add-another.hint',  '|fr-fr-resources|')}}">
                                    <xf:label value="xxf:r('components.section.add-another.label', '|fr-fr-resources|')"/>
                                </xf:trigger>

                                <xsl:if test="$remove-at-bottom">
                                    <!-- NOTE: Don't apply remove constraint: in this mode it's always possible to remove the last row. -->
                                    <!-- TODO: not($frozen) and -->
                                    <xf:var
                                        name="can-remove"
                                        value="count($repeat-sequence) gt $min"
                                    />

                                    <!-- Show only if can remove -->
                                    <xf:trigger
                                        appearance="minimal"
                                        id="fr-repeater-remove-bottom"
                                        ref="$repeat-context[$can-remove]"
                                        xxf:title="{{xxf:r('components.section.remove.hint',  '|fr-fr-resources|')}}">
                                        <xf:label value="xxf:r('components.section.remove.label', '|fr-fr-resources|')"/>
                                    </xf:trigger>
                                </xsl:if>
                            </xf:group>
                        </xsl:if>
                    </xh:div>
                </xsl:template>

            </xsl:transform>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>