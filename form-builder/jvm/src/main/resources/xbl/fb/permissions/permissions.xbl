<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl
    xmlns:xh="http://www.w3.org/1999/xhtml"
    xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
    xmlns:saxon="http://saxon.sf.net/"
    xmlns:xbl="http://www.w3.org/ns/xbl"
    xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
    xmlns:fbf="java:org.orbeon.oxf.fb.FormBuilderXPathApi">

    <xbl:binding id="fb-permissions" element="fb|permissions">
        <xbl:handlers>
            <xbl:handler event="fb-show-dialog" phase="target" defaultAction="cancel">
                <xxf:show dialog="dialog"/>
            </xbl:handler>
        </xbl:handlers>
        <xbl:resources>
            <xbl:style src="/xbl/fb/permissions/permissions.css"/>
        </xbl:resources>
        <xbl:implementation>
            <xf:model id="permissions-model">
                <xf:instance id="ui">
                    <ui valid="true">
                        <apply-trigger/>
                        <has-permissions/>
                        <readonly-checked>create read update delete</readonly-checked>
                        <permissions/>
                        <always-show-roles/>
                    </ui>
                </xf:instance>
                <!-- Maintain validity flag -->
                <xf:setvalue event="xxforms-invalid" observer="ui" ref="@valid">false</xf:setvalue>
                <xf:setvalue event="xxforms-valid"   observer="ui" ref="@valid">true</xf:setvalue>
                <xf:bind ref="instance('ui')">
                    <xf:bind ref="apply-trigger" readonly="instance()/@valid = 'false'"/>
                    <xf:bind ref="readonly-checked" readonly="true()"/>
                    <xf:bind ref="permissions" id="permissions-bind">
                        <!-- If a permission is assigned to anyone, remove it from other "rows", as it would be redundant -->
                        <xf:bind
                            ref="permission[position() > 1]/operations"
                            readonly="false()"
                            calculate="string-join(xxf:split()[not (. = xxf:split(instance('ui')/permissions/permission[1]/operations))], ' ')"/>
                        <xf:bind ref="permission" id="permission-bind">
                            <xf:bind ref="role" constraint="xxf:non-blank()" required="true()"/>
                            <!-- If operations contains 'update', automatically add 'read' -->
                            <xf:bind ref="operations" readonly="false()" calculate="if (xxf:split() = 'update')
                                then string-join(distinct-values((xxf:split(), 'read')), ' ') else ."/>
                        </xf:bind>
                    </xf:bind>
                </xf:bind>
                <xf:instance id="permission-template">
                    <permission>
                        <operations/>
                    </permission>
                </xf:instance>
                <xf:instance id="permission-with-role-template">
                    <permission>
                        <operations/>
                        <role/>
                    </permission>
                </xf:instance>
            </xf:model>
        </xbl:implementation>
        <xbl:template>
            <xf:group appearance="xxf:internal" id="container">

                <xf:var name="metadata" ><xxf:value value="." xxbl:scope="outer" xbl:attr="model context ref=metadata-ref"/></xf:var>
                <xf:var name="resources"><xxf:value value="." xxbl:scope="outer" xbl:attr="model context ref=resources-ref"/></xf:var>
                <xf:var name="ui"       value="instance('ui')"/>

                <!-- On dialog open, copy permissions from metadata into our UI representation -->
                <xf:action event="xxforms-dialog-open" observer="dialog">

                    <xf:var name="has-permissions" value="exists($metadata/permissions)"/>
                    <xf:setvalue ref="$ui/has-permissions" value="if ($has-permissions) then 'true' else ''"/>

                    <!-- Get and store roles we always show first -->
                    <xf:delete ref="$ui/always-show-roles/role"/>
                    <xf:action iterate="fbf:alwaysShowRoles()">
                        <xf:var name="role" value="."/>
                        <xf:insert context="$ui/always-show-roles" ref="*" origin="xf:element('role', $role)"/>
                    </xf:action>

                    <!-- Clean UI permissions -->
                    <xf:delete ref="$ui/permissions/*"/>
                    <xf:insert context="$ui/permissions" origin="instance('permission-template')"/>
                    <xf:insert context="$ui/permissions" ref="*" origin="instance('permission-template')"/>
                    <xf:insert context="$ui/permissions/permission[last()]" origin="xf:attribute('for', 'owner')"/>
                    <xf:insert context="$ui/permissions" ref="*" origin="instance('permission-template')"/>
                    <xf:insert context="$ui/permissions/permission[last()]" origin="xf:attribute('for', 'group-members')"/>
                    <xf:action iterate="$ui/always-show-roles/role">
                        <xf:var name="role" value="."/>
                        <xf:insert context="$ui/permissions" ref="*" origin="instance('permission-with-role-template')"/>
                        <xf:setvalue ref="$ui/permissions/permission[last()]/role" value="$role"/>
                    </xf:action>

                    <!-- Populate UI permissions based metadata -->
                    <xf:action if="$has-permissions">

                        <!-- Add permission for anyone, owner, and group -->
                        <xf:setvalue ref="$ui/permissions/permission[1]/operations"
                                     value="$metadata/permissions/permission[empty(*)]/@operations"/>
                        <xf:setvalue ref="$ui/permissions/permission[@for = 'owner']/operations"
                                     value="$metadata/permissions/permission[exists(owner)]/@operations"/>
                        <xf:setvalue ref="$ui/permissions/permission[@for = 'group-members']/operations"
                                     value="$metadata/permissions/permission[exists(group-member)]/@operations"/>

                        <!-- Add permissions attached to a role -->
                        <xf:var name="roles" value="distinct-values($metadata/permissions/permission/user-role/@any-of/xxf:split())"/>
                        <xf:action iterate="$roles">
                            <!-- Current role -->
                            <xf:var name="role" value="."/>
                            <xf:var name="ui-role" value="replace($role, '%20', ' ')"/>
                            <!-- Permissions for the current role -->
                            <xf:var name="permissions" value="$metadata/permissions/permission[xxf:split(user-role/@any-of) = $role]"/>
                            <!-- If necessary, insert new permission in UI, and populate it -->
                            <xf:var name="operations" value="string-join($permissions/@operations, ' ')"/>
                            <xf:var name="existing-permission" value="$ui/permissions/permission[role = $ui-role]"/>
                            <xf:action if="exists($existing-permission)">
                                <!-- For the case of the roles configured to always, which we added already -->
                                <xf:setvalue ref="$existing-permission/operations" value="$operations"/>
                            </xf:action>
                            <xf:action if="empty($existing-permission)">
                                <xf:insert context="$ui/permissions" ref="permission" origin="instance('permission-template')"/>
                                <xf:var name="new-permission" value="$ui/permissions/permission[last()]"/>
                                <!-- NOTE: Unescape internal spaces as the roles used in Liferay are user-facing labels that can contain spaces -->
                                <xf:insert context="$new-permission" origin="xf:element('role', $ui-role)"/>
                                <xf:setvalue ref="$new-permission/operations" value="$operations"/>
                            </xf:action>
                        </xf:action>
                    </xf:action>

                </xf:action>

                <!-- On save, copy permissions from UI representation to metadata
                     - to test from the browser, after opening the dialog, run:
                       ORBEON.xforms.Document.dispatchEvent({targetId: 'fb-permissions-dialogâ‰¡save-trigger', eventName: 'fr-test'}) -->
                <xf:action event="DOMActivate fr-test" observer="save-trigger">
                    <!-- Reset permissions element -->
                    <xf:delete ref="$metadata/permissions"/>
                    <xf:action if="$ui/has-permissions = 'true'">
                        <xf:insert context="$metadata" ref="*" origin="xf:element('permissions')"/>

                        <!-- In UI replace space in role by %20 -->
                        <xf:setvalue iterate="$ui/permissions/permission/role" ref="." value="replace(xxf:trim(.), ' ', '%20')"/>

                        <!-- Add "anyone" permission -->
                        <xf:var name="anyone-operations" value="$ui/permissions/permission[1]/operations"/>
                        <xf:insert if="$anyone-operations != ''" context="$metadata/permissions" origin="xf:element('permission', xf:attribute('operations', $anyone-operations))"/>

                        <!-- Add owner permission -->
                        <xf:var name="owner-operations" value="$ui/permissions/permission[@for = 'owner']/operations"/>
                        <xf:insert if="$owner-operations != ''" context="$metadata/permissions" origin="xf:element('permission', (xf:attribute('operations', $owner-operations), xf:element('owner')))"/>
                        <!-- Add group members permission -->
                        <xf:var name="group-members-operations" value="$ui/permissions/permission[@for = 'group-members']/operations"/>
                        <xf:insert if="$group-members-operations != ''" context="$metadata/permissions" origin="xf:element('permission', (xf:attribute('operations', $group-members-operations), xf:element('group-member')))"/>

                        <!-- For each role-based permission, get the roles that can access it, and store in metadata as a separate permission element -->
                        <xf:var name="role-permissions" value="$ui/permissions/permission[exists(role)]"/>
                        <xf:action iterate="distinct-values($role-permissions/operations/xxf:split())">
                            <xf:var name="operation" value="."/>
                            <xf:var name="roles" value="string-join(saxon:sort($role-permissions[xxf:split(operations) = $operation]/role), ' ')"/>
                            <xf:insert context="$metadata/permissions" ref="*" origin="xf:element('permission', (
                                xf:attribute('operations', $operation),
                                xf:element('user-role', xf:attribute('any-of', $roles))))"/>
                        </xf:action>

                        <!-- Optional code to consolidate multiple permission for the same roles -->
                        <xf:var name="any-ofs" value="distinct-values($metadata/permissions/permission/user-role/@any-of)"/>
                        <xf:var name="operations" value="for $ao in $any-ofs return string-join($metadata/permissions/permission[user-role/@any-of = $ao]/@operations, ' ')"/>
                        <xf:delete ref="$metadata/permissions/permission[user-role]"/>
                        <xf:action iterate="1 to count($any-ofs)">
                            <xf:var name="i" value="position()"/>
                            <xf:insert context="$metadata/permissions" ref="*" origin="xf:element('permission', (
                                xf:attribute('operations', saxon:item-at($operations, $i)),
                                xf:element('user-role', xf:attribute('any-of', saxon:item-at($any-ofs, $i)))))"/>
                        </xf:action>

                        <!-- Log metadata permissions -->
                        <xf:action type="javascript" if="event('xxf:type') = 'fr-test'">
                            <xf:param name="xml" value="saxon:serialize($metadata/permissions, 'xml')"/>
                            <xf:body>
                                console.log(ORBEON.jQuery.parseXML(unescape(xml)));
                            </xf:body>
                        </xf:action>
                    </xf:action>
                </xf:action>

                <!-- Hide dialog -->
                <xf:action event="DOMActivate" observer="save-trigger cancel-trigger">
                    <xxf:hide dialog="dialog"/>
                </xf:action>

                <xxf:dialog id="dialog" class="fb-permissions-dialog">
                    <xf:label ref="$resources/dialog-permissions/label"/>
                    <!-- Choose mode -->
                    <xf:select ref="$ui/has-permissions" appearance="full" class="fb-has-permissions">
                        <xf:item>
                            <xf:label ref="$resources/dialog-permissions/enable-permissions"/>
                            <xf:value>true</xf:value>
                        </xf:item>
                        <xf:action event="xforms-value-changed" if=". = 'true' and empty($ui/permissions/permission)">
                            <xf:insert context="$ui/permissions/permission" origin="instance('permission-template')"/>
                        </xf:action>
                    </xf:select>
                    <xf:group ref=".[$ui/has-permissions = 'true']">
                        <!-- Edit roles -->
                        <xf:var name="anyone-operations" value="xxf:split($ui/permissions/permission[1]/operations)"/>
                        <fr:grid
                            repeat="content"
                            bind="permissions-bind"
                            template="instance('permission-with-role-template')"
                            freeze="{3 + count($ui/always-show-roles/role)}"
                            class="fb-permissions-grid">

                            <xh:tr>
                                <xf:var name="is-anyone"      value="empty(role) and empty(@for)"/>
                                <xf:var name="is-owner-group" value="exists(@for)"/>
                                <!-- Role name or "anyone" -->
                                <xh:td class="fb-role" colspan="4">
                                    <xf:output
                                        ref=".[$is-anyone or $is-owner-group]"
                                        value="
                                            $resources/dialog-permissions/(
                                                if (context()/@for = 'owner') then
                                                    owner
                                                else if (context()/@for = 'group-members') then
                                                    group-members
                                                else
                                                    anyone)">
                                        <xf:label value="$resources/dialog-permissions/role"/>
                                    </xf:output>
                                    <xf:group ref=".[exists(role)]">
                                        <xf:var name="is-always-show-roles" value="role = $ui/always-show-roles/role"/>
                                        <xf:output ref="role[$is-always-show-roles]"/>
                                        <xf:input  ref="role[not($is-always-show-roles)]" incremental="true" class="fb-role-name"/>
                                    </xf:group>
                                </xh:td>
                                <!-- Checkboxes for operations -->
                                <!-- NOTE: Put `id` on controls as `grid.xbl` needs this -->
                                <xh:td colspan="2">
                                    <xf:select
                                        id="fb-permissions-create-checkbox"
                                        ref="
                                            if ($is-owner-group) then
                                                ()
                                            else if (not($is-anyone) and $anyone-operations = 'create') then
                                                $ui/readonly-checked
                                            else
                                                operations"
                                        appearance="full"
                                        class="fb-create-permission">
                                        <xf:label ref="$resources/dialog-permissions/create"/>
                                        <xf:item>
                                            <xf:label ref="$resources/dialog-permissions/create"/>
                                            <xf:value>create</xf:value>
                                        </xf:item>
                                    </xf:select>
                                </xh:td>
                                <xh:td colspan="2">
                                    <!-- If this role has the 'update' permission, make the 'read' checkbox read-only -->
                                    <xf:select
                                        id="fb-permissions-read-checkbox"
                                        ref="
                                            if ((not($is-anyone) and $anyone-operations = 'read') or (xxf:split(operations) = 'update')) then
                                                $ui/readonly-checked
                                            else
                                                operations"
                                            appearance="full"
                                        class="fb-read-permission">
                                        <xf:label ref="$resources/dialog-permissions/read"/>
                                        <xf:item>
                                            <xf:label ref="$resources/dialog-permissions/read"/>
                                            <xf:value>read</xf:value>
                                        </xf:item>
                                    </xf:select>
                                </xh:td>
                                <xh:td colspan="2">
                                    <xf:select
                                        id="fb-permissions-update-checkbox"
                                        ref="
                                            if (not($is-anyone) and $anyone-operations = 'update') then
                                                $ui/readonly-checked
                                            else
                                                operations"
                                        appearance="full"
                                        class="fb-update-permission">
                                        <xf:label ref="$resources/dialog-permissions/update"/>
                                        <xf:item>
                                            <xf:label ref="$resources/dialog-permissions/update"/>
                                            <xf:value>update</xf:value>
                                        </xf:item>
                                    </xf:select>
                                </xh:td>
                                <xh:td colspan="2">
                                    <xf:select
                                        id="fb-permissions-delete-checkbox"
                                        ref="
                                            if (not($is-anyone) and $anyone-operations = 'delete') then
                                                $ui/readonly-checked
                                            else
                                                operations"
                                        appearance="full"
                                        class="fb-delete-permission">
                                        <xf:label ref="$resources/dialog-permissions/delete"/>
                                        <xf:item>
                                            <xf:label ref="$resources/dialog-permissions/delete"/>
                                            <xf:value>delete</xf:value>
                                        </xf:item>
                                    </xf:select>
                                </xh:td>
                            </xh:tr>
                        </fr:grid>
                    </xf:group>

                    <!-- Buttons -->
                    <xh:div class="fr-dialog-buttons">
                        <xf:group appearance="xxf:internal" id="triggers">
                            <xh:span>
                                <xf:trigger ref="$ui/apply-trigger" id="save-trigger" appearance="xxf:primary" xxf:external-events="fr-test">
                                    <xf:label ref="$resources/apply/label"/>
                                </xf:trigger>
                                <xf:output value="$resources/or/label"/>
                                <xf:trigger appearance="minimal" id="cancel-trigger">
                                    <xf:label ref="$resources/cancel/label"/>
                                </xf:trigger>
                            </xh:span>
                        </xf:group>
                    </xh:div>
                </xxf:dialog>
            </xf:group>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>